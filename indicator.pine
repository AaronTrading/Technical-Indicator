//@version=5
indicator("EMA SMA RSI MACD Bollinger Stochastics + SL/TP + Filtrage", overlay=false)

// === Moyennes Mobiles ===
ema9 = ta.ema(close, 9)
ema21 = ta.ema(close, 21)
ema50 = ta.ema(close, 50)
plot(ema9, title="EMA 9", color=color.orange)
plot(ema21, title="EMA 21", color=color.blue)
plot(ema50, title="EMA 50", color=color.purple)

// === RSI ===
rsi = ta.rsi(close, 14)
rsi_val = rsi > 70 ? -1 : rsi < 30 ? 1 : 0
rsi_signal = rsi_val == 1 ? "📈 RSI : Achat" : rsi_val == -1 ? "📉 RSI : Vente" : "⏸ RSI : Neutre"

// === MACD ===
[macdLine, signalLine, _] = ta.macd(close, 12, 26, 9)
macd_val = macdLine > signalLine ? 1 : macdLine < signalLine ? -1 : 0
macd_signal = macd_val == 1 ? "📈 MACD : Achat" : macd_val == -1 ? "📉 MACD : Vente" : "⏸ MACD : Neutre"

// === Stochastique ===
k = ta.stoch(close, high, low, 14)
d = ta.sma(k, 3)
stoch_val = k > d and k < 80 ? 1 : k < d and k > 20 ? -1 : 0
stoch_signal = stoch_val == 1 ? "📈 Stoch : Achat" : stoch_val == -1 ? "📉 Stoch : Vente" : "⏸ Stoch : Neutre"

// === Bollinger Bands ===
basis = ta.sma(close, 20)
dev = 2 * ta.stdev(close, 20)
upper = basis + dev
lower = basis - dev
boll_val = close > upper ? -1 : close < lower ? 1 : 0
boll_signal = boll_val == 1 ? "📈 Boll : Achat" : boll_val == -1 ? "📉 Boll : Vente" : "⏸ Boll : Neutre"

// === Volume filter ===
vol_ma = ta.sma(volume, 20)
volume_ok = volume > vol_ma

// === Filtrage tendance avec EMA50 ===
trend_up = close > ema50
trend_down = close < ema50

// === Pondération des signaux ===
poids_ema_cross = 0.4
poids_rsi = 0.15
poids_macd = 0.15
poids_boll = 0.15
poids_stoch = 0.15

// === EMA Cross signal (9 & 21) ===
ema_cross_up = ta.crossover(ema9, ema21)
ema_cross_down = ta.crossunder(ema9, ema21)
ema_cross_val = ema_cross_up ? 1 : ema_cross_down ? -1 : 0
ema_cross_signal = ema_cross_val == 1 ? "📈 EMA Cross : Achat" : ema_cross_val == -1 ? "📉 EMA Cross : Vente" : "⏸ EMA Cross : Neutre"

// Appliquer filtre tendance au signal EMA Cross : 
// on conserve seulement les signaux en accord avec la tendance EMA50
ema_cross_val_filtered = ema_cross_val == 1 and trend_up ? 1 : ema_cross_val == -1 and trend_down ? -1 : 0

// === Total score pondéré (avec filtre volume) ===
total_score_raw = ema_cross_val_filtered * poids_ema_cross + rsi_val * poids_rsi + macd_val * poids_macd + boll_val * poids_boll + stoch_val * poids_stoch
total_score = volume_ok ? total_score_raw : 0  // on annule signal si volume faible

// === Recommandation globale ===
global_signal = total_score >= 0.3 ? "✅ Signal Global : 📈 Achat" : total_score <= -0.3 ? "✅ Signal Global : 📉 Vente" : "✅ Signal Global : ⏸ Neutre"

// === Calcul Stop Loss (SL) et Take Profit (TP) ===
// On utilise EMA21 comme niveau de SL potentiel
// RR = 1.5 (TP = SL * 1.5)
rr = 1.5

var float sl_level = na
var float tp_level = na

// SL et TP calculés seulement si signal d'achat ou vente clair
if global_signal == "✅ Signal Global : 📈 Achat"
    sl_level := ema21  // SL sous EMA21
    distance_sl = close - sl_level
    tp_level := close + rr * distance_sl
else if global_signal == "✅ Signal Global : 📉 Vente"
    sl_level := ema21  // SL au-dessus EMA21
    distance_sl = sl_level - close
    tp_level := close - rr * distance_sl
else
    sl_level := na
    tp_level := na

// === Affichage tableau (à droite) ===
var table signalTable = table.new(position.top_right, 1, 7, border_width=1)

if bar_index % 5 == 0
    table.cell(signalTable, 0, 0, ema_cross_signal, text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(signalTable, 0, 1, rsi_signal, text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(signalTable, 0, 2, macd_signal, text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(signalTable, 0, 3, stoch_signal, text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(signalTable, 0, 4, boll_signal, text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(signalTable, 0, 5, global_signal, text_color=color.yellow, bgcolor=color.new(color.gray, 90))
    table.cell(signalTable, 0, 6, sl_level != na ? "SL: " + str.tostring(sl_level, format.mintick) + " | TP: " + str.tostring(tp_level, format.mintick) : "📊 SL/TP: N/A", text_color=color.new(#49a8f7, 0), bgcolor=color.new(color.gray, 90))

